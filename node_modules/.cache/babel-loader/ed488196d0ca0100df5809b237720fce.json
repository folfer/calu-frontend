{"ast":null,"code":"export default class Shuttle {\n  constructor(p) {\n    this.pos = p.createVector(p.width * 0.5, p.height * 0.75);\n    this.speed = p.createVector(0, 0);\n    this.size = 90;\n    this.img = p.loadImage(require('../assets/peteca.svg'));\n  }\n\n  render(p) {\n    p.stroke(255);\n    p.noFill();\n    p.strokeWeight(2);\n    p.image(this.img, this.pos.x - 45, this.pos.y - 45, this.size, this.size); // p.ellipse(this.pos.x, this.pos.y, this.size, this.size);\n  }\n\n  jump(p, mousex, score) {\n    let delta_x = (this.pos.x - mousex) / (p.width / 2);\n    delta_x *= score * 0.05 + 1;\n    this.speed.y = -20;\n    this.speed.x = delta_x;\n  }\n\n  drag(p) {\n    this.speed.y += 1;\n  }\n\n  move(p) {\n    this.pos.add(this.speed);\n  }\n\n  isAlive(p) {\n    if (this.pos.y > p.height || this.pos.x < 0 || this.pos.x > p.width) {\n      return false;\n    }\n\n    return true;\n  }\n\n  detectCollision(p, obstacle, diameter) {\n    let distance = this.pos.dist(obstacle);\n\n    if (distance < diameter / 2 + this.size / 2) {\n      return true;\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"sources":["/home/folfer/iconlab/deploy-calu/calu-frontend/src/sketches/shuttle.js"],"names":["Shuttle","constructor","p","pos","createVector","width","height","speed","size","img","loadImage","require","render","stroke","noFill","strokeWeight","image","x","y","jump","mousex","score","delta_x","drag","move","add","isAlive","detectCollision","obstacle","diameter","distance","dist"],"mappings":"AAAA,eAAe,MAAMA,OAAN,CAAc;AAE3BC,EAAAA,WAAW,CAACC,CAAD,EAAI;AACb,SAAKC,GAAL,GAAWD,CAAC,CAACE,YAAF,CAAeF,CAAC,CAACG,KAAF,GAAQ,GAAvB,EAA4BH,CAAC,CAACI,MAAF,GAAS,IAArC,CAAX;AACA,SAAKC,KAAL,GAAaL,CAAC,CAACE,YAAF,CAAe,CAAf,EAAkB,CAAlB,CAAb;AACA,SAAKI,IAAL,GAAY,EAAZ;AACA,SAAKC,GAAL,GAAWP,CAAC,CAACQ,SAAF,CAAYC,OAAO,CAAC,sBAAD,CAAnB,CAAX;AACD;;AAEDC,EAAAA,MAAM,CAACV,CAAD,EAAI;AACRA,IAAAA,CAAC,CAACW,MAAF,CAAS,GAAT;AACAX,IAAAA,CAAC,CAACY,MAAF;AACAZ,IAAAA,CAAC,CAACa,YAAF,CAAe,CAAf;AACAb,IAAAA,CAAC,CAACc,KAAF,CAAQ,KAAKP,GAAb,EAAiB,KAAKN,GAAL,CAASc,CAAT,GAAY,EAA7B,EAAiC,KAAKd,GAAL,CAASe,CAAT,GAAW,EAA5C,EAAgD,KAAKV,IAArD,EAA2D,KAAKA,IAAhE,EAJQ,CAKR;AACD;;AAEDW,EAAAA,IAAI,CAACjB,CAAD,EAAIkB,MAAJ,EAAYC,KAAZ,EAAmB;AACrB,QAAIC,OAAO,GAAG,CAAC,KAAKnB,GAAL,CAASc,CAAT,GAAaG,MAAd,KAAuBlB,CAAC,CAACG,KAAF,GAAQ,CAA/B,CAAd;AACAiB,IAAAA,OAAO,IAAID,KAAK,GAAC,IAAN,GAAW,CAAtB;AAEA,SAAKd,KAAL,CAAWW,CAAX,GAAe,CAAC,EAAhB;AACA,SAAKX,KAAL,CAAWU,CAAX,GAAeK,OAAf;AACD;;AAEDC,EAAAA,IAAI,CAACrB,CAAD,EAAI;AACN,SAAKK,KAAL,CAAWW,CAAX,IAAc,CAAd;AACD;;AAEDM,EAAAA,IAAI,CAACtB,CAAD,EAAI;AACN,SAAKC,GAAL,CAASsB,GAAT,CAAa,KAAKlB,KAAlB;AACD;;AAEDmB,EAAAA,OAAO,CAACxB,CAAD,EAAI;AACT,QAAI,KAAKC,GAAL,CAASe,CAAT,GAAWhB,CAAC,CAACI,MAAb,IAAuB,KAAKH,GAAL,CAASc,CAAT,GAAW,CAAlC,IAAuC,KAAKd,GAAL,CAASc,CAAT,GAAWf,CAAC,CAACG,KAAxD,EAA+D;AAC7D,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEDsB,EAAAA,eAAe,CAACzB,CAAD,EAAI0B,QAAJ,EAAcC,QAAd,EAAwB;AACrC,QAAIC,QAAQ,GAAG,KAAK3B,GAAL,CAAS4B,IAAT,CAAcH,QAAd,CAAf;;AACA,QAAIE,QAAQ,GAAID,QAAQ,GAAC,CAAT,GAAa,KAAKrB,IAAL,GAAU,CAAvC,EAA2C;AACzC,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AA9C0B","sourcesContent":["export default class Shuttle {\n  \n  constructor(p) {\n    this.pos = p.createVector(p.width*0.5, p.height*0.75);\n    this.speed = p.createVector(0, 0);\n    this.size = 90;\n    this.img = p.loadImage(require('../assets/peteca.svg'));\n  }\n  \n  render(p) {\n    p.stroke(255);\n    p.noFill();\n    p.strokeWeight(2);\n    p.image(this.img,this.pos.x -45, this.pos.y-45, this.size, this.size);\n    // p.ellipse(this.pos.x, this.pos.y, this.size, this.size);\n  }\n  \n  jump(p, mousex, score) {\n    let delta_x = (this.pos.x - mousex)/(p.width/2);\n    delta_x *= score*0.05+1;\n    \n    this.speed.y = -20;\n    this.speed.x = delta_x;\n  }\n  \n  drag(p) {\n    this.speed.y+=1;\n  }\n  \n  move(p) {\n    this.pos.add(this.speed);\n  }\n\n  isAlive(p) {\n    if (this.pos.y>p.height || this.pos.x<0 || this.pos.x>p.width) {\n      return false;\n    }\n    return true;\n  }\n\n  detectCollision(p, obstacle, diameter) {\n    let distance = this.pos.dist(obstacle);\n    if (distance < (diameter/2 + this.size/2)) {\n      return true;\n    }\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}